#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum CanMessageType {
    Available = 0,
    DeviceError = 1,
    Restart = 2,
    DeviceUid0 = 3,
    DeviceUid1 = 4,
    DeviceIdType = 5,
    DeviceGroup = 6,
    ApplicationVersion = 7,
    Baudrate = 8,
    Uptime = 9,
    CustomString = 10,
    PwmFrequency = 11,
    RequestParameter = 12,
    ApplicationVersionString = 13,
    UpdateSilence = 14,
    FlashStart = 15,
    FlashSelect = 16,
    FlashErase = 17,
    FlashRead = 18,
    FlashWrite = 19,
    FlashVerify = 20,
    FlashProgress = 21,
    ButtonEvent = 30,
    TemperatureSensor = 31,
    HwRev = 41,
    ExtensionMode = 42,
    LampGroup = 90,
    PirSensor = 128,
    HumiditySensor = 129,
    Relais = 130,
    RelaisState = 131,
    Rollershutter = 132,
    RollershutterState = 133,
    RelaisMode = 134,
    AmbientLightSensor = 140,
    AmbientLightSensorWhite = 141,
    Nightlight = 150,
    PressureSensor = 151,
    Co2Equivalent = 152,
    VocBreath = 153,
    AirQuality = 154,
    LogDownload = 155,
    Ping = 156,
    PingDisable = 157,
}

impl core::convert::TryFrom<u8> for CanMessageType {
    type Error = ();

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        use CanMessageType::*;
        let result = match value {
            0 => Available,
            1 => DeviceError,
            2 => Restart,
            3 => DeviceUid0,
            4 => DeviceUid1,
            5 => DeviceIdType,
            6 => DeviceGroup,
            7 => ApplicationVersion,
            8 => Baudrate,
            9 => Uptime,
            10 => CustomString,
            11 => PwmFrequency,
            12 => RequestParameter,
            13 => ApplicationVersionString,
            14 => UpdateSilence,
            16 => FlashSelect,
            17 => FlashErase,
            18 => FlashRead,
            19 => FlashWrite,
            20 => FlashVerify,
            30 => ButtonEvent,
            31 => TemperatureSensor,
            41 => HwRev,
            42 => ExtensionMode,
            90 => LampGroup,
            128 => PirSensor,
            129 => HumiditySensor,
            130 => Relais,
            131 => RelaisState,
            132 => Rollershutter,
            133 => RollershutterState,
            134 => RelaisMode,
            140 => AmbientLightSensor,
            141 => AmbientLightSensorWhite,
            150 => Nightlight,
            151 => PressureSensor,
            152 => Co2Equivalent,
            153 => VocBreath,
            154 => AirQuality,
            155 => LogDownload,
            156 => Ping,
            157 => PingDisable,
            _ => return Err(()),
        };
        Ok(result)
    }
}
